python manage.py shell
-запускаем консоль-
from news.models import *
-импортируем все модели-
User.objects.create_user(username='autorUser1')
-создаем пользователя 1(в последствии автор), так же создаем второго-
User.objects.create_user(username='justUser1')
-создаем просто пользователя 1, так же создаем второго-
Author.objects.create(authorUser = User.objects.get(pk=1))
-Делаем пользователя 1 Автором-
Author.objects.create(authorUser = User.objects.get(pk=2))
-Делаем пользователя 2 Автором-
Category.objects.create(name = 'Cat1')
-создаем категории, следующие категории делаем по аналогии-
Post.objects.create(author=Author.objects.get(pk=1),categoryType='AR', title='Заглавие 1', text='Текст статьти')
-создаем статью за авторством первого автора-
author = Author.objects.get(pk=2)
-присваиваем имя переменной "author" второму автору-
Post.objects.create(author=author, categoryType='AR', title='Заглавие 2', text='Текст статьи')
-создаем статью за авторством второго автора-
Post.objects.create(author=author, categoryType='NW', title='Новость от второго автора', text='Текст новости')
-создаем новость за авторством второго автора-
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
-добавляем категорию, так же создаем остальные.-
Comment.objects.create(commentPost=Post.objects.get(pk=1), commentUser=Author.objects.get(pk=1).authorUser, text='comment one')
-Создали комментарий от автора-
Comment.objects.create(commentPost=Post.objects.get(pk=1), commentUser=User.objects.get(pk=3), text='comment two')
-Создали комментарий от пользователя так же создаем остальные-
Post.objects.get(id=1).like()
-Ставим лайк статье или новости-
Comment.objects.get(id=1).dislike()
-Ставим дизлайк комментарию-
Author.objects.get(pk=1).update_rating()
-обновляем рейтинг автора-
A = Author.objects.order_by('-ratingAuthor')[0]
-сортируем рейтинг автора по убыванию и присваиваем результат переменной А-
f'имя: {A.authorUser.username}, рейтинг: {A.ratingAuthor}'
-выводим имя и рейтинг полученного автора-
P = Post.objects.order_by('-rating')[0]
-сортируем рейтинг статей по убыванию и присваиваем результат переменной P-
f'{P.dateCreation}, {P.author.authorUser.username}, {P.rating}, {P.title}, {P.preview()}'
-Выводим полученный результат согласно требованиям задания-
С = Comment.objects.filter(commentPost=Post.objects.order_by('-rating')[0])
-сортируем комментарии  по нужному нам объекту и присваиваем результат переменной С-
for i in C:
    f'{str(i.dateCreation)[:19]}, {i.commentUser.username}, {i.rating}, {i.text}'
-проходим в цикле по полученному результату и выводим требуемые параметры-
